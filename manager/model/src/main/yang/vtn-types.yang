/*
 * Copyright (c) 2015 NEC Corporation
 * All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this
 * distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
 */

module vtn-types {
    yang-version 1;
    namespace "urn:opendaylight:vtn:types";
    prefix vtype;

    /* OpenDaylight controller */
    import opendaylight-inventory {
        prefix inv;
        revision-date 2013-08-19;
    }

    description
      "The module that descripes various data types used by the VTN Manager.";

    revision 2015-02-09 {
        description "Initial revision.";
    }

    typedef vnode-name {
        description "The name of the virtual node.";
        type string {
            length "1 .. 31";
            pattern "[a-zA-Z0-9][a-zA-Z0-9_]*";
        }
    }

    typedef vtn-update-type {
        description
          "Describes the result of the operation that updates the
           configuration.";

        type enumeration {
            enum CREATED {
                description
                  "Indicates one or more resources have been successfully
                   created.";
                value 0;
            }
            enum REMOVED {
                description
                  "Indicates one or more resources have been successfully
                   removed.";
                value 1;
            }
            enum CHANGED {
                description
                  "Indicates one or more resources have been successfully
                   changed.";
                value 2;
            }
        }
    }

    typedef vtn-error-tag {
        description
          "Describes the generic error conditions.
           VTN RPC will set one of below values as a string into
           application tag in RPC error when it fails.";

        type enumeration {
            enum BADREQUEST {
                description "Indicates RPC input contains invalid data.";
                value 0;
            }

            enum UNAUTHORIZED {
                description "Indicates the request is not authorized.";
                value 1;
            }

            enum NOTFOUND {
                description "Indicates the specified resource was not found.";
                value 2;
            }

            enum NOTACCEPTABLE {
                description
                  "Indicates the specified request is not acceptable. ";
                value 3;
            }

            enum TIMEOUT {
                description "Indicates the operation has been timed out.";
                value 4;
            }

            enum CONFLICT {
                description
                  "Indicates the specified operation will conflict with
                   existing resource.";
                value 5;
            }

            enum GONE {
                description
                  "Indicates the specified resource has already gone.";
                value 6;
            }

            enum INTERNALERROR {
                description
                  "Indicates the operation has been failed due to internal
                   error.";
                value 7;
            }

            enum NOSERVICE {
                description
                  "Indicates the VTN Manager service is not available.";
                value 8;
            }
        }
    }

    grouping vtn-rpc-result {
        description
          "Describes the generic information of the RPC result.";

        leaf status {
            description  "Describes the status of the RPC result.";
            type vtn-update-type;
        }
    }

    typedef vtn-update-operation-type {
        description "Describes how to update existing resources.";

        type enumeration {
            enum SET {
                description
                  "Indicates that present settings are to be replaced with
                   the specified contents.";
                value 0;
            }

            enum ADD {
                description
                  "Indicates that the specified contents are to be added to
                   the present settings.";
                value 1;
            }

            enum REMOVE {
                description
                  "Indicates that the specified contents are to be deleted
                   from the present settings.";
                value 2;
            }
        }
    }

    typedef vtn-port-desc {
        description
          "Describes the location of the physical switch port.
           The value must be a comma-separated list that has 3 elements.

           The first element must be a node-id which specifies the
           physical switch.

           If the second element is not empty, it is treated as the
           identifier of the node connector corresponding to the physical
           switch port. A string representation (in decimal) of the port
           number for the physical switch port needs to be specified when
           you specify the OpenFlow switch port.

           If the third element is not empty, it is treated as the name of
           the physical switch port.";
        type string {
            pattern ".+,.*,.*";
        }
    }

    grouping vtn-index {
        description
          "Describes an int32 fields named `index' that determines the
           order of elements in a list.
           Unlike `ordered-list', a value for `index' field is limited from
           1 to 65535.";

        leaf index {
            description
              "The index value that determines the order of elements in a
               list.";
            type int32 {
                range "1 .. 65535";
            }
        }
    }
}
