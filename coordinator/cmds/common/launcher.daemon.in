#
# Copyright (c) %YEAR_RANGE% NEC Corporation
# All rights reserved.
# 
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v1.0 which accompanies this
# distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
#

##
## UNC daemon configuration file for %DAEMON_DESC%.
##

#
# Daemon process attributes.
#
daemon
{
	# A brief description of the daemon.
	description	= %DAEMON_QDESC%;

	# The key of "command" map associated with the daemon command.
	command		= %DAEMON_QNAME%;

	# Specify type of this daemon process.
	# Supported types are:
	#
	#	0	Unspecified (default)
	#	1	Logical network daemon
	#	2	Physical network daemon
	#	3	Network driver daemon
	#
	process_type	= %PROCESS_TYPE%;

	# Determine whether the daemon executable file is the same as
	# UNC daemon. Default is false.
	uncd		= true;

	# If true, the daemon process is expected to invoke an IPC service
	# request to the launcher on the local host when it has been started
	# successfully. Default is false.
	#
	# The daemon process must invoke an IPC service with specifying the
	# following parameters:
	#
	#	IPC channel address:	uncd@LOCAL
	#	IPC service name:	launcher
	#	IPC service ID:		0
	#
	# If the daemon provides IPC services, the following data must be sent:
	#
	#	Additional data[0]:	IPC channel name provided by the daemon
	#				(STRING)
	#
	# The launcher will wait for an IPC service request from the daemon
	# process when it starts the daemon process.
	#
	# Note that this parameter affects only initial bootstrap.
	# This parameter will be ignored when a daemon process is respawned.
	start_wait	= true;

	# How long, in milliseconds, the launcher should wait for an IPC
	# service request from the daemon process when it starts the daemon.
	# The daemon process will be killed if the launcher does not receive
	# an IPC service request within this milliseconds.
	# This parameter is simply ignored unless "start_wait" is true.
	# Default is 10000 milliseconds.
	#start_timeout	= 10000;

	# Determine order of the daemon start.
	# Daemons are started in ascending order of "start_order".
	start_order	= %START_ORDER%;

	# The key of "command" map associated with the command which stops
	# the daemon. If omitted, the daemon is killed by sending a signal.
	#stop		= "stop";

	# Signal name to use when the launcher stops the daemon.
	# This parameter is ignored if "stop" parameter is defined.
	# Default is "TERM", which represents SIGTERM.
	#stop_signal	= "TERM";

	# How long, in milliseconds, the launcher should wait for the daemon
	# to be stopped after executing "stop" command or sending "stop_signal"
	# signal. Default is 10000 milliseconds.
	#stop_timeout	= 10000;

	# Determine order of the daemon stop.
	# Daemons are stopped in ascending order of "stop_order".
	# Note that the value of "stop_order" affects the timing when to
	# stop the daemon.
	#   - If the value is less than 1000, the daemon is always stopped
	#     before modules in uncd, except for launcher and clstat.
	#   - If the value is greater than or equal 1000, the daemon is
	#     always stopped after modules in uncd, except for launcher and
	#     clstat.
	stop_order	= %STOP_ORDER%;

	# The maximum number of times to restart the daemon when it is
	# terminated unexpectedly.
	# If this value is not zero, the launcher tries to respawn the daemon
	# process when it is terminated. If the number of respawn exceeds
	# this value, the launcher exits abnormally.
	# If this value is zero, which is the default, the launcher process
	# considers that the daemon process is mandatory. So it exits
	# abnormally when the daemon is terminated.
	#respawn_limit	= 0;

	# The minimum lifetime of the daemon process in milliseconds.
	# This parameter only affects the daemon which defines "respawn"
	# parameter as non-zero value.
	# If the daemon is terminated unexpectedly and it is the first time,
	# the launcher tries to respawn the daemon unconditionally.
	# And then the daemon is terminated again within this milliseconds,
	# the launcher never respawns the daemon and exits abnormally.
	# Default is 10000 milliseconds.
	#min_lifetime	= 10000;

	# Maximum number of stderr log file rotation.
	# Log file rotation is disabled if zero is specified.
	# stderr logging is disabled if a negative value is specified.
	# Default is 10.
	#stderr_rotate	= 10;

	# Determine order of cluster state event delivery.
	# Each cluster state event is delivered to daemons in ascending
	# order of clevent_order value.
	#
	# Array index determines type of cluster state event.
	# Currently the following events are defined:
	#
	#	0	- ACT event
	#
	# Cluster events are also delivered to uncd. uncd always uses 1000
	# as clevent_order value for all event types.
	# - 1000 can not be defined as clevent_order value because
	#   clevent_order value must be unique.
	# - If clevent_order value is greater than 1000, a cluster event
	#   associated with the array index is delivered after uncd.
	# - If clevent_order value is less than 1000, a cluster event
	#   associated with the array index is delivered before uncd.
	clevent_order	= [%CLEV_ORDER_ACT%];
}

#
# Command to be executed.
#

# %DAEMON_NAME% daemon.
command %DAEMON_QNAME%
{
	# Path to an executable file for the command.
	# It is recommended to specify an absolute path.
	path		= "%INST_SBINDIR%/%DAEMON_NAME%";

	# The name of the process.
	# Value of this parameter is passed to the process via argv[0].
	# If omitted, an executable file path is used as the process name.
	name		= %DAEMON_QNAME%;

	# Command line arguments, excluding argv[0].
	args		= ["-DR"];
}
