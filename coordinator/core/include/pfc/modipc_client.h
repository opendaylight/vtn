/*
 * Copyright (c) 2012-2013 NEC Corporation
 * All rights reserved.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this
 * distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
 */

#ifndef	_PFC_MODIPC_CLIENT_H
#define	_PFC_MODIPC_CLIENT_H

/*
 * PFC module-specific definitions of IPC client APIs.
 */

#include <pfc/moddefs.h>
#include <pfc/ipc_client.h>

PFC_C_BEGIN_DECL

/*
 * Prototypes.
 */
extern int	__pfc_module_ipcevent_addhdlr(pfc_module_t module,
					      pfc_ipcevhdlr_t *PFC_RESTRICT idp,
					      const char *PFC_RESTRICT
					      channel,
					      pfc_ipcevfunc_t func,
					      const pfc_ipcevattr_t
					      *PFC_RESTRICT attr,
					      const char *PFC_RESTRICT name);
extern int	__pfc_module_ipcevent_rmhdlr(pfc_module_t module,
					     pfc_ipcevhdlr_t id);

#ifdef	PFC_MODULE_BUILD

/*
 * static inline int PFC_FATTR_ALWAYS_INLINE
 * pfc_module_ipcevent_add_handler(pfc_ipcevhdlr_t *PFC_RESTRICT idp,
 *				   const char *PFC_RESTRICT channel,
 *				   pfc_ipcevfunc_t func,
 *				   const pfc_ipcevattr_t *PFC_RESTRICT attr,
 *				   const char *PFC_RESTRICT name)
 *	Add a named IPC event handler which receives events generated by
 *	the IPC channel specified by `channel'.
 *
 *	`channel' is a pointer to IPC channel name, not IPC channel address.
 *	The IPC server's address part in `channel' is simply ignored.
 *      If NULL is specified, the channel name of the current default
 *      connection is used.
 *
 *	`attr' is a pointer to event attributes object which determines
 *	behavior of event handler. If NULL is specified to `attr', an event
 *	handler is added with default attributes.
 *
 *	`name' is a user-defined name of event handler.
 *	Currently, it is used only for event delivery logging.
 *	If `name' is NULL, the module name is used.
 *
 * Calling/Exit State:
 *	Upon successful completion, an identifier of the added event handler
 *	is set to the buffer pointed by `idp', and zero is returned.
 *	Otherwise error number which indicates the cause of error is returned.
 *
 * Remarks:
 *	All IPC event handlers are removed by the module system just before
 *	the module's fini() is called.
 */
static inline int PFC_FATTR_ALWAYS_INLINE
pfc_module_ipcevent_add_handler(pfc_ipcevhdlr_t *PFC_RESTRICT idp,
				const char *PFC_RESTRICT channel,
				pfc_ipcevfunc_t func,
				const pfc_ipcevattr_t *PFC_RESTRICT attr,
				const char *PFC_RESTRICT name)
{
	return __pfc_module_ipcevent_addhdlr(PFC_MODULE_THIS_ID, idp,
					     channel, func, attr, name);
}

/*
 * static inline int PFC_FATTR_ALWAYS_INLINE
 * pfc_module_ipcevent_remove_handler(pfc_ipcevhdlr_t id)
 *	Remove the IPC event handler associated with the specified ID.
 *
 * Calling/Exit State:
 *	Upon successful completion, zero is returned.
 *	Otherwise error number which indicates the cause of error is returned.
 *
 * Remarks:
 *	If this function is called in the module's fini(), it always returns
 *	ENOENT because all IPC event handlers are removed by the module system.
 */
static inline int PFC_FATTR_ALWAYS_INLINE
pfc_module_ipcevent_remove_handler(pfc_ipcevhdlr_t id)
{
	return __pfc_module_ipcevent_rmhdlr(PFC_MODULE_THIS_ID, id);
}

#endif	/* PFC_MODULE_BUILD */

PFC_C_END_DECL

#endif	/* !_PFC_MODIPC_CLIENT_H */
